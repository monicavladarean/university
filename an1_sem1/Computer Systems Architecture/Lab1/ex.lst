     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fread,printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fread msvcrt.dll                                                ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import printf msvcrt.dll  
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 612B000000000000            acces_mode dd "a+",0
    17 00000008 696F6E2E74787400            file_name db "ion.txt",0
    18 00000010 FFFFFFFF                    file_descriptor dd -1
    19                                      len equ 100
    20 00000014 00<rept>                    sir times len+1 db 0
    21 00000079 00<rept>                    rez times len+1 db 0
    22 000000DE 00000000                    nr_caract dd 0
    23 000000E2 2573000000000000            format dd "%s",0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                          
    30 00000000 68[00000000]                    push dword acces_mode
    31 00000005 68[08000000]                    push dword file_name
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp, 4*2
    34                                          
    35 00000013 A3[10000000]                    mov [file_descriptor],eax
    36 00000018 83F800                          cmp eax,0
    37 0000001B 745F                            je stop
    38                                          
    39 0000001D FF35[10000000]                  push dword [file_descriptor]
    40 00000023 6A64                            push dword len
    41 00000025 6A01                            push dword 1
    42 00000027 68[14000000]                    push dword sir
    43                                          
    44 0000002C FF15[00000000]                  call [fread]
    45 00000032 83C410                          add esp, 4*4
    46                                          
    47 00000035 A3[DE000000]                    mov [nr_caract],eax
    48 0000003A 83F800                          cmp eax,0
    49 0000003D 743D                            je stop
    50                                          
    51 0000003F 8B0D[DE000000]                  mov ecx, [nr_caract]
    52                                          
    53 00000045 BE[14000000]                    mov esi, sir
    54 0000004A BF[79000000]                    mov edi, rez
    55                                          
    56                                          repeta:
    57                                          
    58                                          do:
    59                                          
    60 0000004F AC                              lodsb
    61                                          
    62 00000050 3C2E                            cmp al,'.'
    63 00000052 7402                            je jos
    64                                          
    65 00000054 0401                            add al,1
    66                                          
    67                                          jos:
    68                                          
    69 00000056 AA                              stosb
    70 00000057 832D[DE000000]01                sub dword[nr_caract],1
    71                                          
    72 0000005E E2EF                            loop do
    73                                          
    74 00000060 833D[DE000000]00                cmp dword[nr_caract],0
    75 00000067 75E6                            jne repeta
    76                                          
    77 00000069 68[79000000]                    push dword rez
    78 0000006E 68[E2000000]                    push dword format
    79 00000073 FF15[00000000]                  call [printf]
    80 00000079 83C408                          add esp, 4*2
    81                                  
    82                                          
    83                                          
    84                                          stop:
    85                                      
    86                                          ; exit(0)
    87 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
