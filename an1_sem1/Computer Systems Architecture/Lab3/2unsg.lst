     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 04                          b db 4
    16 00000002 02                          c db 2
    17 00000003 01                          d db 1
    18 00000004 0100                        e dw 1
    19 00000006 0200000000000000            x dq 2
    20 0000000E 02                          y db 2
    21 0000000F 00000000                	r dd 0
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                  		;(a*b-2*c*d)/(c-e)+x/a; a,b,c,d-byte; e-word; x-qword
    27 00000000 B400                            MOV AH, 0
    28 00000002 A0[02000000]                    mov AL, [c]
    29 00000007 662B05[04000000]                sub AX,word[e]
    30 0000000E 6689C3                          mov BX, AX
    31                                          
    32 00000011 A0[02000000]                    mov AL,[c]
    33 00000016 8A25[03000000]                  mov AH, [d]
    34 0000001C F6E4                            mul AH
    35 0000001E B700                    		mov BH,0
    36 00000020 8A1D[0E000000]                  mov BL,[y]
    37 00000026 66F7E3                          mul BX
    38 00000029 6652                    		push DX
    39 0000002B 6650                    		push AX
    40 0000002D 59                      		pop ECX
    41                                  		
    42 0000002E B800000000              		mov EAX,0
    43 00000033 A0[01000000]                    mov AL, [b]
    44 00000038 8A25[00000000]                  mov AH, [a]
    45 0000003E F6E4                            mul AH
    46 00000040 29C8                            SUB EAX,ECX
    47                                         
    48 00000042 66F7F3                          div BX 
    49 00000045 BB00000000              		mov EBX,0
    50 0000004A 6689C3                          MOV BX, AX
    51                                          
    52 0000004D A1[06000000]                    mov EAX, dword[x]
    53 00000052 8B15[0A000000]          		mov EDX, dword[x+4]
    54 00000058 B900000000              		mov ECX,0
    55 0000005D 8B0D[00000000]                  mov ECX, [a]
    56 00000063 F7F1                            div ECX
    57 00000065 01C3                            add EBX, EAX 
    58 00000067 891D[0F000000]          		mov [r], EBX
    59                                     
    60                                           
    61                                          ; exit(0)
    62 0000006D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000006F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
