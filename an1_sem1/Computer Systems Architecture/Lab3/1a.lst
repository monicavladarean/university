     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 04                           a db 4
    15 00000001 0200                         b dw 2 
    16 00000003 03000000                     c dd 3
    17 00000007 0B00000000000000             d dq 11
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 A1[00000000]                    mov EAX, [a]
    23 00000005 0305[00000000]                  add EAX, [a]
    24 0000000B 8B1D[01000000]                  mov EBX, [b]
    25 00000011 031D[01000000]                  add EBX,[b]
    26 00000017 01D8                    		add EAX,EBX
    27 00000019 8B1D[03000000]                  mov EBX, [c]
    28 0000001F 031D[03000000]                  add EBX, [c]
    29 00000025 01D8                            add EAX, EBX
    30 00000027 BA00000000              		mov EDX,0
    31 0000002C 8B1D[07000000]          		mov EBX, dword[d]
    32 00000032 8B0D[0B000000]                  mov ECX, dword[d+4]
    33 00000038 01D8                    		add EAX, EBX
    34 0000003A 01D0                    		add EAX, EDX
    35                                          
    36                                          ; exit(0)
    37 0000003C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 0000003E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
